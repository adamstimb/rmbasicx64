package rmbasicx64

import (
	"fmt"
	"math"

	"github.com/adamstimb/rmbasicx64/internal/app/rmbasicx64/syntaxerror"
	"github.com/adamstimb/rmbasicx64/internal/app/rmbasicx64/token"
)

// rmAuto represents the AUTO command
// From the manual:
// AUTO [line][, increment]
// Generate line numbers automatically. If you enter AUTO
// on its own, line number 10 will be displayed.  After you
// type instruction(s) for that line and <ENTER>, 20 will be
// displayed at the beginning of the next line.  Use line
// when you want a different starting line number.  Use
// increment to specify the increment between lines.  Before
// a line number is generate, any existing lines with numbers
// between the new line and the last auto-generated line are
// listed.  Consequently you can see what you are skipping
// over or what you are about to replace.  If you do not want
// to overwrite existing lines, you must break out of automatic
// generation.
func (i *Interpreter) RmAuto() (ok bool) {
	i.TokenPointer++
	// Default parameters
	startLine := 10
	increment := 10
	// Try to collect parameters, if any
	if !i.EndOfTokens() {
		if i.TokenStack[1].TokenType == token.NumericalLiteral || i.TokenStack[1].TokenType == token.IdentifierLiteral {
			// Consume startLine
			val, ok := i.AcceptAnyNumber()
			if !ok {
				return false
			}
			startLine = int(math.Round(val))
			if !i.EndOfTokens() {
				// Consume comma
				_, ok := i.AcceptAnyOfTheseTokens([]int{token.Comma})
				if !ok {
					i.ErrorCode = syntaxerror.CommaSeparatorIsNeeded
					i.BadTokenIndex = i.TokenPointer
					return false
				}
				// Consume increment
				val, ok := i.AcceptAnyNumber()
				if !ok {
					return false
				}
				increment = int(math.Round(val))
				// End of expression
				if !i.EndOfTokens() {
					i.ErrorCode = syntaxerror.EndOfInstructionExpected
					i.BadTokenIndex = i.TokenPointer
					return false
				}
			}
		} else {
			i.ErrorCode = syntaxerror.LineNumberExpected
			i.BadTokenIndex = i.TokenPointer
			return false
		}
	}
	// Execute
	// TODO: Implement CTRL-ScrollLock interrupt in nimgobus
	autoLineNumber := startLine
	previousAutoLineNumber := autoLineNumber
	for !i.g.BreakInterruptDetected {
		// list any existing lines between this line and the previous autogenerated line
		lineOrder := i.GetLineOrder()
		for _, lineNumber := range lineOrder {
			if lineNumber > previousAutoLineNumber && lineNumber <= autoLineNumber {
				i.g.Print(fmt.Sprintf("%d %s", lineNumber, i.Program[lineNumber]))
			}
		}
		// Get instructions for this line then increment lineNumber
		edited := i.g.Input(fmt.Sprintf("%d %s", int(autoLineNumber), ""))
		_ = i.ImmediateInput(edited)
		previousAutoLineNumber = autoLineNumber
		autoLineNumber += increment
	}
	return false
}
