package rmbasicx64

import (
	"fmt"
	"math"
)

// rmAuto represents the AUTO command
// From the manual:
// AUTO [line][, increment]
// Generate line numbers automatically. If you enter AUTO
// on its own, line number 10 will be displayed.  After you
// type instruction(s) for that line and <ENTER>, 20 will be
// displayed at the beginning of the next line.  Use line
// when you want a different starting line number.  Use
// increment to specify the increment between lines.  Before
// a line number is generate, any existing lines with numbers
// between the new line and the last auto-generated line are
// listed.  Consequently you can see what you are skipping
// over or what you are about to replace.  If you do not want
// to overwrite existing lines, you must break out of automatic
// generation.
func (i *Interpreter) RmAuto() (ok bool) {
	i.TokenPointer++
	// Default parameters
	startLine := 10
	increment := 10
	// Collect optional startLine and following optional increment
	if !i.OnSegmentEnd() {
		// Collect startLine
		val, ok := i.OnExpression("numeric")
		if !ok {
			return false
		} else {
			startLine = int(math.Round(val.(float64)))
		}
		if !i.OnSegmentEnd() {
			// Collect comma
			if !i.OnComma() {
				return false
			}
			// Collect increment
			val, ok := i.OnExpression("numeric")
			if !ok {
				return false
			} else {
				increment = int(math.Round(val.(float64)))
			}
		}
	}
	// No more params
	if !i.OnSegmentEnd() {
		return false
	}
	// Execute
	autoLineNumber := startLine
	previousAutoLineNumber := autoLineNumber
	for !i.g.BreakInterruptDetected {
		// list any existing lines between this line and the previous autogenerated line
		lineOrder := i.GetLineOrder()
		for _, lineNumber := range lineOrder {
			// TODO: Fix bug that doesn't reveal existing line number if
			// AUTO starts at that line number
			if lineNumber > previousAutoLineNumber && lineNumber <= autoLineNumber {
				i.g.Print(fmt.Sprintf("%d %s", lineNumber, i.Program[lineNumber]))
				i.g.Put(13)
			}
		}
		// Get instructions for this line then increment lineNumber
		edited := i.g.Input(fmt.Sprintf("%d ", int(autoLineNumber)))
		// Don't commit if <BREAK> detected
		if i.g.BreakInterruptDetected {
			return false
		}
		_ = i.ImmediateInput(edited)
		previousAutoLineNumber = autoLineNumber
		autoLineNumber += increment
	}
	return false
}
